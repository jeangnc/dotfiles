""
"" Plugins
""
call plug#begin('~/.vim/plugins')

Plug 'ervandew/supertab'
Plug 'junegunn/vim-easy-align'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdtree' " filesystem explorer
Plug 'vim-airline/vim-airline' " very useful fixed bar
Plug 'jeetsukumaran/vim-indentwise' " indent based motions
Plug 'christoomey/vim-tmux-navigator'

" languages
Plug 'tpope/vim-rails'
Plug 'tpope/vim-markdown'
Plug 'sheerun/vim-polyglot'
Plug 'lumiliet/vim-twig'

"" clojure
Plug 'tpope/vim-fireplace'
Plug 'guns/vim-clojure-static'
Plug 'guns/vim-clojure-highlight'

" fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim' " fuzzyfinder plugin for vim

" git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" syntastic
Plug 'vim-syntastic/syntastic' " allow me to run linters and etc after saving a file
Plug 'mtscout6/syntastic-local-eslint.vim' " allow local configuration to eslint

" colorschemes
Plug 'brendonrapp/smyck-vim'
Plug 'siltaar/primaries.vim'
Plug 'crusoexia/vim-monokai'
Plug 'jacoborus/tender.vim'

call plug#end()


""
"" Variables
""
let mapleader = "-"

" nerdtree
let NERDTreeQuitOnOpen = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeShowHidden = 0
let NERDTreeChDirMode = 1
let NERDTreeWinSize = 40
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeDirArrowExpandable = '+'
let NERDTreeDirArrowCollapsible = '~'
let NERDTreeMapOpenInTab = '<C-t>'
let NERDTreeMapOpenVSplit = '<C-v>'

" syntastic
let g:syntastic_loc_list_height=3
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_ruby_checkers = ['rubocop', 'reek']
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = "âœ—"
" let g:syntastic_debug = 1

" multiple-cursors
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<C-c>'

" airline
let g:airline_powerline_fonts = 0
let g:airline#extensions#fugitiveline#enabled = 0
let g:airline#extensions#branch#enabled = 0
let g:airline_section_x = airline#section#create([])
let g:airline_section_y = airline#section#create([])
let g:airline_section_z = airline#section#create([])

" fzf
let $FZF_DEFAULT_COMMAND = 'ag --ignore-dir=vendor -g ""'

let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-s': 'split',
            \ 'ctrl-v': 'vsplit' }

""
"" Basic configuration
""
set hidden
set number
set cursorline
set ruler
set splitbelow " open new splits below
set splitright " open new splits at the right
set nocompatible " we're running Vim, not Vi!
set ignorecase
set switchbuf=usetab
set colorcolumn=100
set encoding=utf-8
set langmenu=en_US.UTF-8
set term=screen-256color
set number relativenumber

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" autocomple
set completeopt=longest,menuone

" wildmenu
set wildmenu
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem,*.log,*.cache
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*
set wildignore+=*.swp,*~,._*

" whitespace
set nowrap " break line after it reachs the limit
set expandtab " use spaces, not tabs
set backspace=indent,eol,start " backspace through everything in insert mode
set tabstop=4
set shiftwidth=4

" search
set hlsearch
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

""
"" Languages
""
syntax on             " enable syntax highlighting
filetype on           " enable filetype detection
filetype indent on    " enable filetype-specific indenting
filetype plugin on    " enable filetype-specific plugins


""
"" Keymapping
""
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>f :FZF<cr>
nnoremap <leader>sh :History:<cr>
nnoremap <leader>gs "+yiw:Ag <C-r>"<cr>
nnoremap <leader>q :noh<cr>
nnoremap <leader>th :tabm -1<cr>
nnoremap <leader>tl :tabm +1<cr>

nnoremap <F12> :SyntasticToggleMode<cr>
nnoremap <S-h> :tabp<cr>
nnoremap <S-l> :tabn<cr>

" buffers
nnoremap <leader>b :bd<cr>
nnoremap <leader>B :bufdo bd!<cr>

nnoremap <F8> :bnext<cr>
nnoremap <S-F8> :bprevious<cr>

" nerdtree
nnoremap <C-f> :NERDTreeToggle<cr>
nnoremap <C-e> :NERDTreeFind<cr>

" visual
vnoremap // y/<C-R>"<CR>
vnoremap <leader>y "+y

" multiple cursors
nnoremap <C-c> :call multiple_cursors#quit()<CR>

" easy-align
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


""
"" Commands
""
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" strips white spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" automatically resize splits when resizing MacVim window
autocmd VimResized * wincmd =


""
"" Appearance
""
color smyck
highlight ColorColumn guibg=#303030 ctermbg=0
highlight CursorLine cterm=NONE ctermbg=darkblue ctermfg=white guibg=darkred guifg=white


""
"" Others
""
" tmux will send xterm-style keys when its xterm-keys option is on
if &term =~ '^screen' && exists('$TMUX')
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
    execute "set <xHome>=\e[1;*H"
    execute "set <xEnd>=\e[1;*F"
    execute "set <Insert>=\e[2;*~"
    execute "set <Delete>=\e[3;*~"
    execute "set <PageUp>=\e[5;*~"
    execute "set <PageDown>=\e[6;*~"
    execute "set <xF1>=\e[1;*P"
    execute "set <xF2>=\e[1;*Q"
    execute "set <xF3>=\e[1;*R"
    execute "set <xF4>=\e[1;*S"
    execute "set <F5>=\e[15;*~"
    execute "set <F6>=\e[17;*~"
    execute "set <F7>=\e[18;*~"
    execute "set <F8>=\e[19;*~"
    execute "set <F9>=\e[20;*~"
    execute "set <F10>=\e[21;*~"
    execute "set <F11>=\e[23;*~"
    execute "set <F12>=\e[24;*~"
endif
